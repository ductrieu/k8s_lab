nodes:

####### MASTER NODE ###################################
    - hostname_override: k8s-01
      address: 10.211.145.220
      user: admin
      role:
        - controlplane
        - etcd
        - worker

    - hostname_override: k8s-01
      address: 10.211.145.221
      user: admin
      role:
        - controlplancluster
        - etcd
        - worker

    - hostname_override: k8s-01
      address: 10.211.145.222
      user: admin
      role:
        - controlplane
        - etcd
        - worker



# If set to true, RKE will not fail when unsupported Docker version
# are found
ignore_docker_version: true

enable_cri_dockerd: true
# Cluster level SSH private key
# Used if no ssh information is set for the node
ssh_key_path: "/home/vt_admin/.ssh/id_rsa"

private_registries:
  - url: 10.60.129.132:8890
    is_default: true

cluster_name: k8s-cluster

kubernetes_version: v1.29.9-rancher1-1

services:
    etcd:
    kube-api:
      # IP range for any services created on Kubernetes
      # This must match the service_cluster_ip_range in kube-controller
      service_cluster_ip_range: 10.50.0.0/16
      # Expose a different port range for NodePort services
      service_node_port_range: 30000-32767    
      pod_security_policy: false
      # Add additional arguments to the kubernetes API server
      # This WILL OVERRIDE any existing defaults
      extra_args:
        # Enable audit log to stdout
        audit-log-path: "-"
        # Increase number of delete workers
        delete-collection-workers: 3
        # Set the level of log output to debug-level
        v: 4
        default-not-ready-toleration-seconds: 30
        default-unreachable-toleration-seconds: 30
    # Note for Rancher 2 users: If you are configuring Cluster Options
    # using a Config File when creating Rancher Launched Kubernetes,
    # the names of services should contain underscores only:
    # `kube_controller`. This only applies to Rancher v2.0.5 and v2.0.6.
    kube-controller:
      # CIDR pool used to assign IP addresses to pods in the cluster
      cluster_cidr: 10.52.0.0/16
      # IP range for any services created on Kubernetes
      # This must match the service_cluster_ip_range in kube-api
      service_cluster_ip_range: 10.50.0.0/16
      extra_args:
        node-monitor-grace-period: "30s"
        node-monitor-period: "30s"
          #pod-eviction-timeout: "30s"
        horizontal-pod-autoscaler-initial-readiness-delay: "90s"
    kubelet:
      # Base domain for the cluster
      cluster_domain: cluster.local
      # IP address for the DNS service endpoint
      cluster_dns_server: 10.50.0.10
      # Fail if swap is on
      fail_swap_on: false
      # Set max pods to 250 instead of default 110
      extra_args:
        max-pods: 250
        kube-reserved: "cpu=200m,memory=1Gi"
        system-reserved: "cpu=200m,memory=1Gi"
      # Optionally define additional volume binds to a service
      extra_binds:
        - "/usr/libexec/kubernetes/kubelet-plugins:/usr/libexec/kubernetes/kubelet-plugins"
        - "/lib/modules:/lib/modules"

# authentication:
#     strategy: x509
#     sans:
#       - "10.184.234.50"
#       - "10.184.234.38"
#       - "10.184.234.39"

addon_job_timeout: 3000
authorization:
    mode: rbac
# Specify network plugin-in (canal, calico, flannel, weave, or none)
network:
    plugin: calico
# Specify DNS provider (coredns or kube-dns)
dns:
    provider: coredns

monitoring:
    provider: metrics-server

ingress:
    provider: nginx
    tolerations:
    - key: "node.kubernetes.io/unreachable"
      operator: "Exists"
      effect: "NoExecute"
      tolerationseconds: 120
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationseconds: 120
  
# All add-on manifests MUST specify a namespace - SAMPLE
addons: |-
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: ingress-nginx-loadbalancer
      namespace: ingress-nginx
    spec:
      ports:
      - name: https
        port: 443
        protocol: TCP
      - name: http
        port: 80
        protocol: TCP
      selector:
        app: ingress-nginx
        app.kubernetes.io/instance: ingress-nginx
      sessionAffinity: None
      type: LoadBalancer

